#!@@MHC_RUBY_PATH@@
# -*- coding: utf-8; mode: ruby; -*-

### mhc2ol -- copy articles from mhc to Outlook.
##
## Author:  MIYOSHI Masanori <miyoshi@quickhack.net>
##          Yoshinari Nomura <nom@quickhack.net>
##
##
## Created: 2001/09/15
## Revised: $Date: 2006/10/27 00:53:10 $
##

$DEBUG = false

STDOUT .sync= true
STDERR .sync= true

require 'win32ole'
require 'mhc-kconv'
require 'mhc-date'
require 'mhc-schedule'

module OlConst
end

module RepeatPattern
  class Period
    def initialize(sdate, edate, stime, etime)
      if stime
        v = stime .to_a()
        if v[0] >= 24
          stime = MhcTime .new(v[0] - 24, v[1])
          sdate = sdate .succ(1)
        end
      end

      if etime
        v = etime . to_a()
        if v[0] >= 24
          etime = MhcTime .new(v[0] - 24, v[1])
          edate = edate .succ(1)
        end
      end

      @sdate = sdate
      @edate = edate
      @stime = stime
      @etime = etime
    end

    def get_period()
      [@sdate, @edate]
    end

    def get_duration()
      if @edate .nil? || @sdate .nil?
        60 * 24
      else
        (@edate - @sdate + 1) * 60 * 24 # min
      end
    end

    def get_time()
      [@stime, @etime]
    end

    def get_sdatetime
      if @stime .nil?
        Time .local(@sdate. y, @sdate. m, @sdate .d, 0, 0)
      else
        Time .local(@sdate. y, @sdate. m, @sdate .d, @stime .hh, @stime .mm)
      end
    end

    def get_edatetime
      if @stime .nil?
        Time .local(@edate. y, @edate. m, @edate .d, 0, 0)
      else
        Time .local(@edate. y, @edate. m, @edate .d, @etime .hh, @etime .mm)
      end
    end

    def handle_recurrence(ol_appoint)
    end

    def get_recurrence(ol_appoint)
      rp = ol_appoint .GetRecurrencePattern()
      rp .Interval = @interval if @interval
      rp .PatternStartDate = Exporter .to_ol_date(@sdate) if @sdate
      rp .PatternEndDate = Exporter .to_ol_date(@edate) if @edate
      if @stime || @etime
        rp .Duration = 0
        rp .StartTime = @stime .to_s if @stime
        rp .EndTime = @etime .to_s if @etime
      else
        rp .Duration = 60 * 24
      end
      return rp
    end
  end

  class NonRepeat < Period
    def initialize(sdate, stime, etime)
      super(sdate, sdate, stime, etime)
    end
  end

  class Daily < Period
    def initialize(start, finish, stime, etime, interval)
      super(start, finish, stime, etime)
      @interval = interval
    end
  end

  class Weekly < Period
    def initialize(start, finish, stime, etime, interval, dow)
      super(start, finish, stime, etime)
      @interval = interval
      @dow = dow
    end

    def handle_recurrence(ol_appoint)
      rp = get_recurrence(ol_appoint)
      mask = 0
      for i in 0..6
        mask += (1 << i) if @dow[i]
      end
      rp .RecurrenceType = OlConst::OlRecursWeekly
      rp .DayOfWeekMask = mask
    end
  end

  class MonthlyByDate < Period
    def initialize(start, finish, stime, etime, interval)
      super(start, finish, stime, etime)
      @interval = interval
    end

    def handle_recurrence(ol_appoint)
      # DBI: multiple days should be supported.
      rp = get_recurrence(ol_appoint)
      rp .RecurrenceType = OlConst::OlRecursMonthly
      rp .DayOfMonth = @sdate .d()
    end
  end

  class MonthlyByDow < Period
    def initialize(start, finish, stime, etime, interval, wom, dow)
      super(start, finish, stime, etime)
      @interval = interval
      @wom = wom
      @dow = dow
    end

    def handle_recurrence(ol_appoint)
      # DBI: multiple days should be supported.
      rp = get_recurrence(ol_appoint)
      rp .RecurrenceType = OlConst::OlRecursMonthNth
      rp .DayOfWeekMask = (1 << @dow)
      # Instance(week of month) begins with 1
      rp .Instance = [@wom + 1, 5] .min()
    end
  end

  class Yearly < Period
    def initialize(start, finish, stime, etime, interval)
      super(start, finish, stime, etime)
      @interval = interval
    end

    def handle_recurrence(ol_appoint)
      # DBI: multiple months should be supported.
      rp = get_recurrence(ol_appoint)
      rp .RecurrenceType = OlConst::OlRecursYearly
      rp .DayOfMonth = @sdate .d()
      rp .MonthOfYear = @sdate .m()
    end
  end

  class YearlyNth < Period
    def initialize(start, finish, stime, etime, wom, dow)
      super(start, finish, stime, etime)
      @wom = wom
      @dow = dow
    end

    def handle_recurrence(ol_appoint)
      # DBI: multiple months should be supported.
      rp = get_recurrence(ol_appoint)
      rp .RecurrenceType = OlConst::OlRecursYearNth
      rp .MonthOfYear = @sdate .m()
      rp .DayOfWeekMask = (1 << @dow)
      rp .Instance = @wom + 1 # Instance(week of month) begins with 1
    end
  end
end


def usage
  print '
usage: mhc2ol [-a | -i | -d | -N] [-A] [-H] [-n] [-s] [-m] [-r dir] [-c category] [YYYYMMDD-yyyymmdd]

  mhc2ol -- Add/Copy mhc articles to Outlook.

    -v     : Verbose mode.
    -a     : Add mhc articles to Outlook.
             all the original records of Outlook will remain.
    -i     : Copy mhc articles into Outlook.
             all the original records of Outlook will be lost.
    -d     : Copy mhc articles into Outlook.
             Only the records of Outlook in `MHC-sch\' category
             will be lost.
    -N     : Copy only the articles that have been modified since
             the last execution.
    -H     : Add/Copy mhc articles to Outlook without HEADER part.
    -n     : Do nothing effectives. Useful for checking.
    -s     : Split appointments and tasks.
    -m     : Append an additional category `MHC-sch\'.
    -r dir : Set repository directory of the mhc.
             ~/Mail/schedule
    -c     : Copy only the mhc articles of which the category
             matches the specified regexp.
    -A     : Disable reminder if the mhc article already has been passed.

    YYYYMMDD-yyyymmdd : set a start and end date of scanning mhc.
                        if omitted, scan from 3 months ago to
                        3 months after.
'
  exit 1
end

##
## sub routines.
##
class MhcScheduleItem
  ## the following method is imported from mhc-schedule.rb
  ## convert to Outlook Datebook record.
  def to_outlook()
    dates = []
    day_cp = day .dup()
    ### for repeat
    beg, fin = occur_min, occur_max
    fin = nil if fin == DURATION_MAX

    ## First, treat X-SC-Day: field.
    while day_cp .length > 0
      if ((day_cp .length > 1 \
           && day_cp .length == day_cp .max - day_cp .min + 1) \
          && (time_b == nil && time_e == nil))
        ## repeat in a series of days -- make up as a daily.
        dates << RepeatPattern::Daily .new(day_cp .min, day_cp .max,
                                           time_b, time_e, 1)
        day_cp = []
      else
        dates << RepeatPattern::NonRepeat .new(day_cp .shift, time_b, time_e)
      end
    end

    ## Second, treat X-SC-Cond: field.
    if cond .length == cond_wek .length && cond_wek .length > 0
      ## weekly
      weeks = []
      for w in 0 .. 6
        weeks << cond_wek .include?(MhcDate::W_LABEL[w]) ? true : false
      end
      dates << RepeatPattern::Weekly .new(beg, fin, time_b, time_e, 1, weeks)

    elsif  cond_ord .length >= 1  &&
          !cond_ord .include?('5th') &&
           cond_wek .length >= 1  &&
           cond_num .length == 0  &&
           cond_mon .length == 0
      ## monthly by day
      cond_ord .each{|ord_str|
        cond_wek .each{|wek_str|
          ord = MhcDate::O_LABEL .index(ord_str .downcase())
          wek = MhcDate::W_LABEL .index(wek_str)
          sch2 = MhcScheduleItem .new .add_cond(ord_str) .add_cond(wek_str)
          beg2 = beg .dup
          while !sch2 .occur_on?(beg2) ## xxx 多分これは不要?
            beg2 .succ!
          end
          dates << RepeatPattern::MonthlyByDow .new(beg2, fin,
                                                    time_b, time_e, 1,
                                                    ord, wek)
        }
      }
    elsif cond_num .length == 1 &&
          cond_num .length == cond .length
      ## monthly by date
      while !occur_on?(beg) ## xxx こっちは必要
        beg .succ!
      end
      dates << RepeatPattern::MonthlyByDate .new(beg, fin, time_b, time_e, 1)

    elsif cond_num .length == 1 &&
          cond_mon .length == 1 &&
          cond_wek .length == 0 &&
          cond_ord .length == 0
      ## yearly by date
      y = beg .y
      m = MhcDate::M_LABEL .index(cond_mon[0]) + 1
      d = cond_num[0] .to_i
      date = MhcDate .new(y, m, d)
      if date < beg
        date .y_succ!
      end
      ## 2/29 はどうする?
      dates << RepeatPattern::Yearly .new(date, fin, time_b, time_e, 1)

    elsif cond_ord .length == 1  &&
          cond_ord[0] != '5th'   &&
          cond_wek .length == 1  &&
          cond_num .length == 0  &&
          cond_mon .length == 1
      ## yearly by day
      ord = MhcDate::O_LABEL .index(cond_ord[0])
      wek = MhcDate::W_LABEL .index(cond_wek[0])
      m   = MhcDate::M_LABEL .index(cond_mon[0]) + 1
      date = MhcDate .new(beg .y, m, 1)
      if date .m < beg .m
        date .y_succ!
      end
      while !occur_on?(date)
        date .succ!
      end
      dates << RepeatPattern::YearlyNth .new(date, fin, time_b, time_e,
                                             ord, wek)

    elsif cond .empty?
      ## do nothing
    else
      ## conversion failed.
      dates = []
    end

    if dates .empty?
      # STDERR .print "#{occur_min .to_js} : #{subject} unsupported. ignored..\n"
      return nil
    else
      return dates
    end
  end

  def dump_without_header
    desc = description .to_s
    desc += "\n" if desc != '' and desc !~ /\n\z/n

    return desc
  end
end

class Exporter
  @@sync_file = File .expand_path("~/Mail/schedule/.ol_sync")
  @@flag_verbose = false
  @@flag_install = false
  @@flag_export_part = 'all' # 'all' || 'body_only'
  @@flag_noharm = false
  @@flag_timestamp = false
  @@flag_disable_passed_sch = false
  @@mhc_category_name = 'MHC-sch'
  @@additional_category = false

  def initialize(mdb, outlook)
    @mhc_db = mdb
    @outlook = outlook
    @category_regexp = ""
    @last_sync_infos = []
    if @@flag_timestamp
      begin
        fp = open(@@sync_file, 'r')
        @last_sync_infos = Marshal .load(fp)
      rescue
      ensure
        fp .close() if fp
      end
    else
      begin
        File .delete(@@sync_file)
      rescue
      end
    end
    @ol_name_space = @outlook .GetNamespace("MAPI")
    folder_type = OlConst::OlFolderCalendar
    @ol_calendar = @ol_name_space .GetDefaultFolder(folder_type)
    folder_type = OlConst::OlFolderTasks
    @ol_tasks = @ol_name_space .GetDefaultFolder(folder_type)
  end

  def get_ol_appointment(id)
    ap = nil
    begin
      ap = @ol_name_space .GetItemFromID(id, @ol_calendar.StoreID)
      if ap.Parent.DefaultItemType != OlConst::OlAppointmentItem
        ap = nil
      end
    rescue
    end
    ap
  end
  private :get_ol_appointment

  def get_ol_task(id)
    ap = nil
    begin
      tsk = @ol_name_space .GetItemFromID(id, @ol_tasks.StoreID)
      if tsk.Parent.DefaultItemType != OlConst::OlTaskItem
        tsk = nil
      end
    rescue
    end
    tsk
  end
  private :get_ol_task

  def ol_is_update?(ol_infos)
    is_update = false
    for info in ol_infos
      entry_id = info[0]
      last_modified_time = info[1]
      appoint = get_ol_appointment(entry_id)
      if appoint == nil || appoint .LastModificationTime != last_modified_time
        is_update = false
        break
      end
      is_update = true
    end
    is_update
  end
  private :ol_is_update?

  def delete_ol_appointments(ol_infos)
    for info in ol_infos
      entry_id = info[0]
      appoint = get_ol_appointment(entry_id)
      if appoint
        print "deleting ", appoint .Subject, "\n" if @@flag_verbose
        appoint .delete()
      end
      entry_id = info[2]
      task = get_ol_task(entry_id) if entry_id
      if task
        print "deleting ", task .Subject, "\n" if @@flag_verbose
        task .delete()
      end
    end
  end
  private :delete_ol_appointments

  def setup_ol_appointments(periods, sch)
    ol_info = []
    for period in periods
      appoint = @outlook .CreateItem(OlConst::OlAppointmentItem)
      sdate, edate = period .get_period()
      sdate = Exporter .to_ol_date(sdate)
      edate = Exporter .to_ol_date(edate)
      edate = sdate if !edate

      print "Subject:", MhcKconv::todisp(sch .subject()), "\n" if @@flag_verbose
      appoint .Subject = MhcKconv::todisp(sch .subject())
      appoint .Location = MhcKconv::todisp(sch .location()) if sch.location()

      print "Time: ", sch .time_as_string(), "\n" if @@flag_verbose
      print "Path: ", sch .path(), "\n" if @@flag_verbose

      stime, etime = period .get_time()
      sdate += " " + stime .to_s if sdate && stime
      etime_tmp = if etime then etime else stime end
      edate += " " + etime_tmp .to_s if edate && etime_tmp

      print "Date: ", sdate, "-", edate, "\n" if @@flag_verbose

      appoint .Start = sdate if sdate
      appoint .End = edate if edate
      # If any time is not specified, the appointment is a kind of AllDayEvent.
      if !stime && !etime
        appoint .AllDayEvent = true
        appoint .Duration = period .get_duration()
      end

      cat_string = sch .category_as_string()
      if @@flag_additional_category
        cat_string = @@mhc_category_name + "," + cat_string
      end
      appoint .Categories = cat_string
      case @@flag_export_part
      when 'all'
        appoint .Body = MhcKconv::todisp(sch .dump())
      when 'body_only'
        appoint .Body = MhcKconv::todisp(sch .dump_without_header())
      end

      # a reminder is valid for a future schedule.
      if sch .alarm() != nil then
        if period .get_sdatetime >= Time .now && $flag_disable_passed_sch
          appoint .ReminderSet = true
          appoint .ReminderMinutesBeforeStart = sch .alarm() / 60
        else
          appoint .ReminderSet = false
        end
      else
        appoint .ReminderSet = false
      end

      # handle recurrence.
      period .handle_recurrence(appoint)

      # contents of appointment
      cats = sch .category_as_string() .downcase .split(' ')
      todo_p = true if cats .delete('todo')
      done_p = true if cats .delete('done')
      appoint .Sensitivity = OlConst::OlPrivate if cats .include?('private')
      cat_string = cats .join(',')
      if @@flag_additional_category
        cat_string = @@mhc_category_name + "," + cat_string
      end
      appoint .Categories = cat_string
      case @@flag_export_part
      when 'all'
        appoint .Body = MhcKconv::todisp(sch .dump())
      when 'body_only'
        appoint .Body = MhcKconv::todisp(sch .dump_without_header())
      end
      appoint .Save() if !$flag_separation  || !todo_p

      # Copy TODO
      if todo_p
        task = @outlook .CreateItem(OlConst::OlTaskItem)
        sdate, edate = sch .duration
        task .StartDate = Exporter .to_ol_date(sdate) || appoint .Start
        task .DueDate = Exporter .to_ol_date(edate) || task .StartDate

        if done_p
          task .Complete = true
          task .DateCompleted = appoint .End
        end
        if !sch .priority || sch .priority < 50
          task .Importance = OlConst::OlImportanceLow
        elsif sch .priority < 80
          task .Importance = OlConst::OlImportanceNormal
        else
          task .Importance = OlConst::OlImportanceHigh
        end

        task .Categories = appoint .Categories
        task .Sensitivity = appoint .Sensitivity
        task .Subject = appoint .Subject
        task .Body = appoint .Body
        task .ReminderSet = false
        task .Save()
        print " - And set it to Task\n" if @@flag_verbose

        ol_info << [appoint .EntryID, appoint .LastModificationTime, task .EntryID]
      else
        ol_info << [appoint .EntryID, appoint .LastModificationTime, nil]
      end
    end
    ol_info
  end
  private :setup_ol_appointments

  def sync_from_outlook(sch, last_sync_info)

    ## Outlook側での更新内容をmhcに取り込む.  取り込む内容は場所
    ## (Location), 期限(Day), 時間(Time), 完了フラグ(TODO/DONE), 優先
    ## 順位(Priority), 期間(Duration) とする.  分類(Category)は変換ルー
    ## ルが定義できないとまずいハズ.
    entry_id = last_sync_info[0]
    appoint = get_ol_appointment(entry_id) if entry_id
    entry_id = last_sync_info[2]
    task = get_ol_task(entry_id) if entry_id
    cats = sch .category_as_string() .split(' ')

    # ol_appointから 場所, 期限, 時間 を取り込む.
    if appoint
      sch.set_location(MhcKconv::toeuc(appoint .Location))
      # 期限/時刻: どうしよう？ appoint .Start / .End
    end

    # ol_taskから 期間, 完了フラグ, 優先順位 を取り込む
    if task
      # 期間: .StartDate, .DueDate
      # 完了フラグ: Complete, DateCompleted
      if task .Complete
        if ! cats .include?('done')
          # 今回完了した仕事.  作業期間をBodyに埋め込む
          sch .description = sch .duration + sch .description
          sch .set_duration( nil , nil)
          cats .delete('todo')  # 削除
          cats .add('done')     # 追加
        end
      end
      # 優先順位: .Importance
    end

    # 期間変更は ol_task, ol_appoint の変更をマージする必要あり?  基本
    # 的に後優先で取り込む.
    sch .add_sch

    # 更新されたlast_sync_infoを返す
    last_sync_info
  end
  private :sync_from_outlook

  def send_to_outlook(periods, sch)
    if sch. path()
      file = sch .path()
      rec_id = sch .rec_id()
    else
      file = MhcScheduleDB::DEF_RCFILE
      rec_id = (sch .subject() + sch .category_as_string()\
                + sch .cond_as_string() + "@dot.schedule")
    end
    sync_info = [rec_id,  File .mtime(file)]

    # check if schedules are up-to-date.
    is_update = false
    last_sync_info = @last_sync_infos .assoc(rec_id)

    if last_sync_info
      ## 前回のsync情報がある場合
      @last_sync_infos .delete(last_sync_info)
      mhc_last_modified_time = last_sync_info[1]
      ol_last_sync_infos = last_sync_info[2]
      ## mhc側が更新されているか？
      mhc_is_modified = (File .mtime(file) != mhc_last_modified_time)
      ## (mhc未更新のとき)Outlook側が更新されているか？
      is_update = ol_is_update?(ol_last_sync_infos) unless mhc_is_modified
      ## mhc更新済み または mhc未更新かつOutlook未更新のとき
      ## → Outlookエントリを削除する(mhcエントリを再度提供する).
      delete_ol_appointments(ol_last_sync_infos) unless is_update
    end
    if is_update
      ## mhc未更新かつOutlook更新済み.  Outlookエントリは残してある.
      sync_info << ol_last_sync_infos
      #TODO: Outlookにもとづいてmhcを更新する
#      sync_info << sync_with_outlook(sch, last_sync_info)
      print "copying to Outlook is skipped!\n" if @@flag_verbose
    else
      ## 上記以外.  Outlookエントリはもともとないか削除済み.
      sync_info << setup_ol_appointments(periods, sch)
      print "\n"  if @@flag_verbose
    end
    sync_info
  end
  private :send_to_outlook

  def export(from, to)
    @sync_infos = []
    sch_count, sent = 0, 0
    @mhc_db .each_sch(from, to) {|sch|
      next unless @category_regexp .match(sch .category_as_string())
      sch_count += 1
      print "adding ", MhcKconv::todisp(sch .subject), "\n" if @@flag_verbose

      if periods = sch .to_outlook()
        if @@flag_verbose
          print "    converted into #{periods .length} Outlook article(s)."
        end

        if !$flag_noharm
          print " sending to Outlook ...\n    " if @@flag_verbose
          sync_info = send_to_outlook(periods, sch)
          if ! sync_info .nil?
            @sync_infos << sync_info
            sent += 1
            print "."
          else
            print MhcKconv::todisp("(#{sch .subject}) write_error\n")
          end
        else
          print " not sent.\n" if @@flag_verbose
        end
      else
        print "failed to convert."
        print MhcKconv::todisp("  subject: #{sch .subject}\n")
        print "  first occured: #{sch .occur_min}\n"
        print "  path: #{file}\n"
      end
      print "\n"  if @@flag_verbose
    }
    print "\n"
    print "\n#{sent}/#{sch_count} article(s) successfully sent.\n"
    @sync_infos
  end

  def delete_unmanaged_schedules()
    if !@@flag_noharm
      for table in @last_sync_infos
        ol_infos = table[2]
        for info in ol_infos
          entry_id = info[0]
          appoint = get_ol_appointment(entry_id)
          appoint .delete() if appoint
        end
      end
    end
  end

  def write_sync_info()
    if !@@flag_noharm
      begin
        fp = open(@@sync_file, 'w')
        Marshal .dump(@sync_infos, fp)
      rescue
      ensure
        fp .close() if fp
      end
    end
  end

  def delete_ol_schedules()
    if (@@flag_install || @@flag_discreet) && !@@flag_noharm
      # Appointments
      print "deleting appointments in Outlook."
      items = @ol_calendar .items()
      index = items .Count
      while index > 0 do
        cats = items. Item(index) .Categories
        unless @@flag_discreet && !cats .include?(@@mhc_category_name)
          items .Remove(index)
        end
        index -= 1
        print "."
      end
      print ".. done.\n"

      # Tasks
      print "deleting tasks in Outlook."
      items = @ol_tasks .items()
      index = items .Count
      while index > 0 do
        cats = items. Item(index) .Categories
        unless @@flag_discreet && !cats .include?(@@mhc_category_name)
          items .Remove(index)
        end
        index -= 1
        print "."
      end
      print ".. done.\n"
    end
  end

  def Exporter.set_sync_filename(name)
    @@sync_file = name
  end

  def Exporter.set_flag_verbose(flag)
    @@flag_verbose = flag
  end

  def Exporter.set_flag_install(flag)
    @@flag_install = flag
  end

  def Exporter.set_flag_discreet(flag)
    @@flag_discreet = flag
  end

  def Exporter.set_flag_export_part(flag)
    @@flag_export_part = flag
  end

  def Exporter.set_flag_noharm(flag)
    @@flag_noharm = flag
  end

  def Exporter.set_flag_timestamp(flag)
    @@flag_timestamp = flag
  end

  def Exporter.set_flag_additional_category(flag)
    @@flag_additional_category = flag
  end

  def Exporter.set_flag_disable_passed_sch(flag)
    @@set_flag_disable_passed_sch = flag
  end

  def Exporter.to_ol_date(date)
    format("%4d/%02d/%02d", date .y(), date .m(), date .d()) if date
  end

  def set_category_regexp(category_regexp)
    @category_regexp = category_regexp
  end
end

##
## option check.
##

$flag_verbose = false
$flag_noharm, $flag_append, $flag_install = false, false, false
$flag_export_part = 'all' # 'all' || 'body_only'
$flag_from, $flag_to = nil, nil
$flag_timestamp = nil
$flag_category_regexp = Regexp .new("")
$flag_dir = File .expand_path("~/Mail/schedule")
$flag_separation = false
$flag_discreet = false
$flag_additional_category = false
$flag_disable_passed_sch = false

while ARGV .length > 0
  case ARGV[0]
  when '-v'
    $flag_verbose = true
  when '-a'
    $flag_append  = true
  when '-i'
    $flag_install = true
  when '-d'
    $flag_discreet = true
  when '-H'
    $flag_export_part = 'body_only'
  when '-n'
    $flag_noharm  = true
  when '-r'
    ARGV .shift
    $flag_dir = ARGV[0]
  when '-c'
    ARGV .shift
    $flag_category_regexp = Regexp .new(ARGV[0], true);
  when /^(\d{8})-(\d{8})$/
    $flag_from, $flag_to = MhcDate .new($1), MhcDate .new($2)
  when '-N'
    $flag_timestamp = true
  when '-s'
    $flag_separation = true
  when '-m'
    $flag_additional_category = true
  when '-A'
    $flag_disable_passed_sch = true
  else
    usage()
  end
  ARGV .shift
end

$flag_from = MhcDate .new .m_succ!(-3) if !$flag_from
$flag_to   = MhcDate .new .m_succ!(+3) if !$flag_to


usage() unless (($flag_append && !$flag_install \
                 && !$flag_discreet && !$flag_timestamp) \
                ||(!$flag_append && $flag_install \
                   && !$flag_discreet && !$flag_timestamp) \
                || (!$flag_append && !$flag_install \
                    && $flag_discreet && !$flag_timestamp) \
                || (!$flag_append && !$flag_install \
                    && !$flag_discreet && $flag_timestamp))

##
## Initialize Outlook OLE Automation object
##

begin
  outlook = WIN32OLE .new('Outlook.Application')
  WIN32OLE .const_load(outlook, OlConst)
rescue
  STDERR .print("Cannot find Outlook in your PC!\n")
  STDERR .print("Please install Outlook (*NOT* Outlook Express) before execute this command.\n")
  exit(1)
end

##
## Open mhc & copy to Outlook
##

mdb = MhcScheduleDB .new($flag_dir)

Exporter .set_sync_filename($flag_dir + "/.ol_sync")
Exporter .set_flag_verbose($flag_verbose)
Exporter .set_flag_install($flag_install)
Exporter .set_flag_export_part($flag_export_part)
Exporter .set_flag_discreet($flag_discreet)
Exporter .set_flag_noharm($flag_noharm)
Exporter .set_flag_timestamp($flag_timestamp)
Exporter .set_flag_additional_category($flag_additional_category)
Exporter .set_flag_disable_passed_sch($flag_disable_passed_sch)
exporter = Exporter .new(mdb, outlook)
exporter .set_category_regexp($flag_category_regexp)
exporter .delete_ol_schedules()
exporter .export($flag_from, $flag_to)
exporter .delete_unmanaged_schedules()
exporter .write_sync_info()

##
## close Outlook & exit
##

exit 0

### Copyright Notice:

## Copyright (C) 1999, 2000 Yoshinari Nomura. All rights reserved.
## Copyright (C) 2000 MHC developing team. All rights reserved.

## Redistribution and use in source and binary forms, with or without
## modification, are permitted provided that the following conditions
## are met:
##
## 1. Redistributions of source code must retain the above copyright
##    notice, this list of conditions and the following disclaimer.
## 2. Redistributions in binary form must reproduce the above copyright
##    notice, this list of conditions and the following disclaimer in the
##    documentation and/or other materials provided with the distribution.
## 3. Neither the name of the team nor the names of its contributors
##    may be used to endorse or promote products derived from this software
##    without specific prior written permission.
##
## THIS SOFTWARE IS PROVIDED BY THE TEAM AND CONTRIBUTORS ``AS IS''
## AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
## LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
## FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
## THE TEAM OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
## INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
## (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
## SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
## HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
## STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
## ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
## OF THE POSSIBILITY OF SUCH DAMAGE.

### mhc2ol ends here
